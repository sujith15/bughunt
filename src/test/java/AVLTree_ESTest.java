/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 04:54:12 GMT 2022
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-3514));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1717));
      assertEquals(1, aVLTree0.height());
      
      int int0 = 1;
      aVLTree0.insert(46);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.height = 2970;
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(28);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node1);
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-560));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(16);
      assertEquals(0, aVLTree0.height());
      
      int int0 = (-912);
      aVLTree0.insert((-912));
      assertEquals(1, aVLTree0.height());
      
      int int1 = (-875);
      aVLTree0.delete((-875));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-30));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.insert((-779));
      assertEquals(2, aVLTree0.height());
      
      aVLTree0.delete(16);
      assertEquals(2, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-912));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(3627);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1148));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(538);
      assertEquals(2, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(1);
      assertEquals(2, aVLTree0.height());
      assertNotNull(aVLTree_Node1);
      
      aVLTree0.delete(1);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1451));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1485);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1148));
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(740);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node2);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.find(3627);
      assertFalse(aVLTree_Node3.equals((Object)aVLTree_Node1));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node3, aVLTree_Node1);
      assertNotNull(aVLTree_Node3);
      
      aVLTree0.delete((-1120));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(1979);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node4 = aVLTree0.find((-1070));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node4);
      
      AVLTree.Node aVLTree_Node5 = aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node5);
      
      AVLTree.Node aVLTree_Node6 = aVLTree0.find(1485);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node6);
      
      AVLTree.Node aVLTree_Node7 = aVLTree0.find((-1148));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node7);
      
      AVLTree.Node aVLTree_Node8 = aVLTree0.find((-503));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node8);
      
      AVLTree.Node aVLTree_Node9 = aVLTree0.find((-1070));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node9);
      
      AVLTree.Node aVLTree_Node10 = aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node10);
      
      AVLTree.Node aVLTree_Node11 = aVLTree0.find((-1120));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node11);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(1236);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1236);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-607));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(2104);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node1.height = (-607);
      assertEquals((-607), aVLTree0.height());
      
      aVLTree_Node1.height = (-607);
      assertEquals((-607), aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals((-607), aVLTree0.height());
      
      int int1 = 157;
      // Undeclared exception!
      try { 
        aVLTree0.insert(int1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(2675);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      aVLTree0.delete((-1037));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-160));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(2930);
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int1);
      
      int int2 = aVLTree0.height();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int2);
      
      aVLTree0.delete(2930);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree_Node0.right = null;
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.key = (-101);
      assertEquals(0, aVLTree0.height());
      
      aVLTree_Node0.height = (-1306);
      assertEquals((-1306), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
      
      int int3 = aVLTree0.getBalance(aVLTree_Node0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int3);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find((-160));
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node2);
      
      int int4 = aVLTree0.height();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int4);
      
      int int5 = aVLTree0.getBalance(aVLTree_Node0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int5);
      assertSame(aVLTree_Node0, aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(750);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert(974);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertNotNull(aVLTree_Node2);
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
      
      aVLTree0.delete(1857);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(918);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1559);
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node1);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals((-1), aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node2);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node3);
      
      AVLTree.Node aVLTree_Node4 = aVLTree0.getRoot();
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node4);
      
      aVLTree0.insert(125);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node5 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node5);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert(699);
      assertEquals(0, aVLTree0.height());
      
      int int0 = aVLTree0.getBalance(aVLTree_Node0);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(0, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node2);
      
      int int1 = aVLTree0.height();
      assertTrue(int1 == int0);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int1);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete(1236);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1236);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-607));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(2104);
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node1.height = (-607);
      assertEquals((-607), aVLTree0.height());
      
      aVLTree_Node1.height = (-607);
      assertEquals((-607), aVLTree0.height());
      
      aVLTree_Node1.height = 1;
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node1);
      assertFalse(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals((-1), int1);
      assertSame(aVLTree_Node1, aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertNotNull(aVLTree_Node2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      int int0 = 0;
      aVLTree0.delete(0);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(2659);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(688);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.right = aVLTree_Node0.right;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.key = (-939);
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node1.left = aVLTree_Node0;
      assertEquals(1, aVLTree0.height());
      
      aVLTree_Node0.right = aVLTree_Node1;
      assertEquals(1, aVLTree0.height());
      
      int int1 = aVLTree0.getBalance(aVLTree_Node0);
      assertTrue(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(0, int1);
      assertSame(aVLTree_Node0, aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node2, aVLTree_Node1);
      assertSame(aVLTree_Node2, aVLTree_Node0);
      assertNotNull(aVLTree_Node2);
      
      AVLTree.Node aVLTree_Node3 = aVLTree0.getRoot();
      assertEquals(1, aVLTree0.height());
      assertSame(aVLTree_Node3, aVLTree_Node0);
      assertSame(aVLTree_Node3, aVLTree_Node2);
      assertSame(aVLTree_Node3, aVLTree_Node1);
      assertNotNull(aVLTree_Node3);
      
      // Undeclared exception!
      aVLTree0.find(688);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1456));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete((-1456));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-1456));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1456));
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(1);
      assertEquals(1, aVLTree0.height());
      assertNull(aVLTree_Node1);
      
      aVLTree0.delete(2893);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert(1082);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertNotNull(aVLTree_Node2);
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      int int1 = aVLTree0.height();
      assertTrue(int1 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int1);
      
      int int2 = aVLTree0.height();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-127));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1841);
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.delete(1);
      assertEquals((-1), aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1));
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert(1220);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find((-1));
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node1);
      
      AVLTree.Node aVLTree_Node2 = aVLTree0.getRoot();
      assertFalse(aVLTree_Node2.equals((Object)aVLTree_Node0));
      assertEquals(0, aVLTree0.height());
      assertNotSame(aVLTree_Node2, aVLTree_Node0);
      assertNotNull(aVLTree_Node2);
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-2415));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1784);
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.insert(0);
      assertEquals(1, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node1 = aVLTree0.find(0);
      assertFalse(aVLTree_Node1.equals((Object)aVLTree_Node0));
      assertEquals(1, aVLTree0.height());
      assertNotSame(aVLTree_Node1, aVLTree_Node0);
      assertNotNull(aVLTree_Node1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(3883);
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int0);
      
      int int1 = aVLTree0.getBalance((AVLTree.Node) null);
      assertTrue(int1 == int0);
      assertEquals(0, aVLTree0.height());
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(2604);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(2128);
      assertEquals(0, aVLTree0.height());
      
      int int0 = 1483;
      aVLTree0.delete(1483);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(1483);
      assertEquals(0, aVLTree0.height());
      
      int int1 = (-3214);
      aVLTree0.insert((-135));
      assertEquals(1, aVLTree0.height());
      
      aVLTree0.insert((-3214));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.insert(2604);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert((-616));
      assertEquals(0, aVLTree0.height());
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertEquals(0, aVLTree0.height());
      assertNotNull(aVLTree_Node0);
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert(1);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-2027));
      assertEquals(1, aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals(1, aVLTree0.height());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1929));
      assertEquals((-1), aVLTree0.height());
      assertNull(aVLTree_Node0);
      
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.insert((-1929));
      assertEquals(1, aVLTree0.height());
      
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      assertNotNull(aVLTree0);
      
      aVLTree0.insert((-1));
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      assertEquals((-1), aVLTree0.height());
      
      int int0 = aVLTree0.height();
      assertEquals((-1), aVLTree0.height());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      assertEquals(0, aVLTree0.height());
      
      aVLTree0.delete((-1));
      aVLTree0.insert((-1096));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1348));
      int int0 = (-1);
      aVLTree0.insert((-1));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(891);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree_Node0.left = null;
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.insert(891);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1));
      aVLTree0.insert((-1));
      aVLTree0.insert(1);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(1571);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.height();
      aVLTree0.insert((-1));
      aVLTree0.getRoot();
      aVLTree0.insert(1087);
      aVLTree0.insert(478);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1476));
      aVLTree0.find(1);
      aVLTree0.insert(1);
      aVLTree0.insert(1082);
      aVLTree0.height();
      aVLTree0.getBalance((AVLTree.Node) null);
      aVLTree0.find(0);
      aVLTree0.find(1082);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(16);
      int int0 = (-912);
      aVLTree0.delete((-912));
      int int1 = 0;
      aVLTree0.insert(0);
      aVLTree0.insert((-30));
      int int2 = 1;
      aVLTree0.insert(1);
      aVLTree0.delete(0);
      aVLTree0.insert((-912));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-912));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(17);
      aVLTree0.insert((-1732));
      aVLTree0.insert((-595));
      aVLTree0.delete(17);
      assertEquals(1, aVLTree0.height());
  }
}
